/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.openqa.selenium.JavascriptExecutor;
import java.util.ArrayList;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver = new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s", String.valueOf(java.time.LocalDateTime.now()), type,
                message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't
         * 2. Generate a unique string using the timestamp
         * 3. Capture screenshot
         * 4. Save the screenshot inside the "/screenshots" folder using the following
         * naming convention: screenshot_<Timestamp>_<ScreenshotType>_<Description>.png
         * eg: screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */


         // 1. Check if the folder "/screenshots" exists, create if it doesn't
    String screenshotFolderPath = "screenshots";
    File folder = new File(screenshotFolderPath);
    if (!folder.exists()) {
        folder.mkdir();
    }

    // 2. Generate a unique string using the timestamp
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSS");
    String timestamp = dateFormat.format(new Date());

    // 3. Capture screenshot
    File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

    // 4. Save the screenshot inside the "/screenshots" folder using the naming convention
    String screenshotFileName = "screenshot_" + timestamp + "_" + screenshotType + "_" + description + ".png";
    File targetScreenshotFile = new File(screenshotFolderPath + "/" + screenshotFileName);
    try {
        FileUtils.copyFile(screenshotFile, targetScreenshotFile);
        System.out.println("Screenshot saved: " + targetScreenshotFile.getAbsolutePath());
    } catch (IOException e) {
        System.err.println("Error occurred while saving the screenshot: " + e.getMessage());
    }
}
    

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestcase", "Testcase01");
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");

            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestcase", "Testcase01");
        return status;
        
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start Testcase", "Test Case 2: Verify User Registration with an existing username ", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "FAIL" : "PASS");
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_01 : Wait for Page to Load
        //Thread.sleep(5000);

        // Search for the "yonex" product
        status = homePage.searchForProduct("yonex");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            return false;
        }

        // Fetch the search results
    List<WebElement> searchResults = homePage.getSearchResults();

        // Verify the search results are available
        if (searchResults.size() == 0) {
            logStatus("TestCase 3", "Test Case Failure. There were no results for the given search string", "FAIL");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText,
                        "FAIL");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        // SLEEP_STMT_02
        Thread.sleep(2000);

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success", "Successfully validated that no products found message is displayed", "PASS");
            }
            logStatus("TestCase 3", "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3", "Test Case Fail. Expected: no results , actual: Results were available", "FAIL");
            return false;
        }

        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as
     * expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_03 : Wait for page to load
        Thread.sleep(5000);

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link", "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down", status ? "PASS" : "FAIL");

                // Open the size chart
                if (result.openSizechart()) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody, driver)) {
                        logStatus("Step Success", "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure", "Failure while validating contents of Size Chart Link", "FAIL");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is
     * working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        //Thread.sleep(3000);
        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id=\"root\"]/div/div[2]/h2")));

        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();
        Thread.sleep(3000);

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ", status ? "PASS" : "FAIL");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user

        
		registration.navigateToRegisterPage();
		status = registration.registerUser("testUser", "abc@123", true);
		if (!status) {
			logStatus("TestCase 6", "Test Case Failure. Happy Flow Test Failed", "FAIL");
		}

		// Save the username of the newly registered user
		lastGeneratedUserName = registration.lastGeneratedUsername;

        // TODO: Login using the newly registed user

        // Go to the login page
		
		login.navigateToLoginPage();

		// Login with the newly registered user's credentials
		status = login.PerformLogin(lastGeneratedUserName, "abc@123");
		if (!status) {
			logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
			logStatus("End TestCase", "Test Case 6: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
		}

        // TODO: Add "Xtend Smart Watch" to cart
        homePage.navigateToHome();
		status = homePage.searchForProduct("Xtend");
		homePage.addProductToCart("Xtend Smart Watch");


        // TODO: Add "Yarine Floor Lamp" to cart
        status = homePage.searchForProduct("Yarine");
		homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        // update watch quantity again to 1





        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        Thread.sleep(3000);
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ", status ? "PASS" : "FAIL");
        return status;
    }


    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        Thread.sleep(3000);

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = checkoutPage.verifyInsufficientBalanceMessage();

        logStatus("End TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");

        return status;
    }

     public static Boolean TestCase8(RemoteWebDriver driver) throws InterruptedException {
         Boolean status = false;

    //     // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
    logStatus("Start TestCase", "Test Case 9: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);
        
        // Register a new user
        registration.navigateToRegisterPage();
		status = registration.registerUser("testUser", "abc@123", true);
		if (!status) {
			logStatus("TestCase 9", "Test Case Failure. Flow Test Failed", "FAIL");
		}
        // Save the username of the newly registered user
		lastGeneratedUserName = registration.lastGeneratedUsername;
        //  Login using the newly registed user
         // Go to the login page
		login.navigateToLoginPage();

		// Login with the newly registered user's credentials
		status = login.PerformLogin(lastGeneratedUserName, "abc@123");
		if (!status) {
			logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
			logStatus("End TestCase", "Test Case 9: Flow Test Failed : ", status ? "PASS" : "FAIL");
		}

        // TODO: Add "yonex" to cart
        homePage.navigateToHome();
		status = homePage.searchForProduct("Yonex");
		homePage.addProductToCart("YONEX Smash Badminton Racquet");
        Thread.sleep(1000);

                    // Open up a new tab and navigate to the home page
    // Switch to the new tab
    ((JavascriptExecutor) driver).executeScript("window.open('about:blank','_blank');");
    ArrayList<String> tabs = new ArrayList<>(driver.getWindowHandles());
    driver.switchTo().window(tabs.get(1));

    // Navigate to the QKart home page
    driver.get("https://crio-qkart-frontend-qa.vercel.app/");

    // Check the contents of the cart
    String cartContentsXPath = "//*[@id='root']/div/div/div[3]/div[2]/div/div[1]/div/div/div[1]";
    WebElement cartContents = driver.findElement(By.xpath(cartContentsXPath));
    String cartContentsText = cartContents.getText();
    if (cartContentsText.contains("YONEX Smash Badminton Racquet")) {
        status = true;
        logStatus("Step Success", "Cart contains the added product: YONEX Smash Badminton Racquet", "PASS");
    } else {
        status = false;
        logStatus("Step Failure", "Cart does not contain the added product: YONEX Smash Badminton Racquet", "FAIL");
    }

    // Close the newly opened tab and switch back to the original tab
    driver.close();
    driver.switchTo().window(tabs.get(0));

    // Log the final status and return it
    logStatus("End TestCase", "Test Case 9: Verify that cart can be edited : ", status ? "PASS" : "FAIL");

        
    return status;



        }
       

       
    

    public static Boolean TestCase9(RemoteWebDriver driver) throws InterruptedException {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Boolean status = false;


         // Step 1: Visit QKart homepage -
         driver.get("https://crio-qkart-frontend-qa.vercel.app/");

         // Step 2: Click on the "Privacy Policy" page link in the footer of the page
         WebElement privacyPolicyLink = driver.findElement(By.linkText("Privacy policy"));
         Thread.sleep(1000);
         privacyPolicyLink.click();
 
         // Step 3: Verify that the URL of the current tab does not change
         String originalUrl = driver.getCurrentUrl();
         String newUrl = driver.getCurrentUrl();
         if (originalUrl.equals(newUrl)) {
             logStatus("Step 1", "URL of the current tab does not change.", "PASS");
             status = true;
         } else {
             logStatus("Step 1", "URL of the current tab changed.", "FAIL");
             status = false;
         }
 
         // Step 4: Switch to the newly opened tab
         ArrayList<String> tabs = new ArrayList<>(driver.getWindowHandles());
         driver.switchTo().window(tabs.get(1));
 
         // Step 5: Check if the privacy policy content is available on the newly opened tab
         WebElement privacyPolicyContent = driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/h2"));
         if (privacyPolicyContent.isDisplayed()) {
             logStatus("Step 2", "Privacy Policy content is available on the newly opened tab.", "PASS");
             status = true;
         } else {
             logStatus("Step 2", "Privacy Policy content is not available on the newly opened tab.", "FAIL");
             status = false;
         }
 
         // Step 6: Move back to the original tab (with QKart home page opened)
         driver.close();
         driver.switchTo().window(tabs.get(0));
 
         // Step 7: Click on the "Terms Of Service" page link in the footer
         WebElement termsOfServiceLink = driver.findElement(By.linkText("Terms of Service"));
         Thread.sleep(1000);
         termsOfServiceLink.click();
 
         // Step 8: Verify that the URL of the current tab does not change
         originalUrl = driver.getCurrentUrl();
         newUrl = driver.getCurrentUrl();
         if (originalUrl.equals(newUrl)) {
             logStatus("Step 3", "URL of the current tab does not change.", "PASS");
             status = true;
         } else {
             logStatus("Step 3", "URL of the current tab changed.", "FAIL");
             status = false;
         }
 
         // Step 9: Switch to the newly opened tab
         tabs = new ArrayList<>(driver.getWindowHandles());
         driver.switchTo().window(tabs.get(1));
 
         // Step 10: Check if the "About Us" content is displayed on the newly opened tab
         WebElement aboutUsContent = driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/h2"));
         if (aboutUsContent.isDisplayed()) {
             logStatus("Step 4", "About Us content is displayed on the newly opened tab.", "PASS");
             status = true;
         } else {
             logStatus("Step 4", "About Us content is not displayed on the newly opened tab.", "FAIL");
             status = false;
         }
 
         // Step 11: Close all the newly opened tabs and switch focus back to the original tab
         driver.close();
         driver.switchTo().window(tabs.get(0));
 
         // Return the final status of the test case
        
    return status;
    }

    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -

             // Step 1: Visit QKart home page - https://crio-qkart-frontend-qa.vercel.app/
             driver.get("https://crio-qkart-frontend-qa.vercel.app/");

             // Step 2: Click on the "Contact us" link in the footer of the page
             WebElement contactUsLink = driver.findElement(By.xpath("//*[@id=\"root\"]/div/div/div[5]/div[2]/p[3]"));
             contactUsLink.click();
     
             // Add an explicit wait after clicking the "Contact us" link
             WebDriverWait wait = new WebDriverWait(driver, 10);
             wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[2]/div[3]/div/section/div/div/div/form/div/div/div[2]/div[1]/div/input")));
     
             // Step 3: Enter the name: crio user
             WebElement nameInput = driver.findElement(By.xpath("/html/body/div[2]/div[3]/div/section/div/div/div/form/div/div/div[2]/div[1]/div/input"));
             nameInput.sendKeys("crio user");
     
             // Step 4: Enter the email Address: criouser@gmail.com
             WebElement emailInput = driver.findElement(By.xpath("/html/body/div[2]/div[3]/div/section/div/div/div/form/div/div/div[2]/div[2]/div/input"));
             emailInput.sendKeys("criouser@gmail.com");
     
             // Step 5: Enter the Message: Testing the contact us page
             WebElement messageInput = driver.findElement(By.xpath("/html/body/div[2]/div[3]/div/section/div/div/div/form/div/div/div[3]/input"));
             messageInput.sendKeys("Testing the contact us page");
     
             // Step 6: Click on the "Contact Now" button
             WebElement contactNowButton = driver.findElement(By.xpath("/html/body/div[2]/div[3]/div/section/div/div/div/form/div/div/div[4]/div/button"));
             contactNowButton.click();
     
             // Add an explicit wait after clicking the "Contact Now" button
             wait.until(ExpectedConditions.invisibilityOfElementLocated(By.className("card-block")));
     
             // Step 7: Ensure that the contact now dialog closes
             try {
                 WebElement dialog = driver.findElement(By.className("card-block"));
                 logStatus("Step 7", "Contact Now dialog still open.", "FAIL");
                 status = false;
             } catch (org.openqa.selenium.NoSuchElementException e) {
                 logStatus("Step 7", "Contact Now dialog closes.", "PASS");
                 status = true;
             }
     
             // Return the final status of the test case  



        return status;
    }

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        logStatus("Start TestCase", "Test Case 11: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
         Register registration = new Register(driver);
         registration.navigateToRegisterPage();

         // Register a new user
         status = registration.registerUser("testUser", "abc@123", true);
         if (!status) {
             logStatus("TestCase 11", "Test Case Failure. Happy Flow Test Failed", "FAIL");
         }

     // Save the username of the newly registered user
         lastGeneratedUserName = registration.lastGeneratedUsername;

    //     // Go to the login page
         Login login = new Login(driver);
        login.navigateToLoginPage();

    //     // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
         if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
             logStatus("End TestCase", "Test Case 11: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
         }

    //     // Go to the home page
         Home homePage = new Home(driver);
         homePage.navigateToHome();

    //     // Find required products by searching and add them to the user's cart
         status = homePage.searchForProduct("Yonex");
         homePage.addProductToCart("YONEX Smash Badminton Racquet");
       

    //     // Click on the checkout button
         homePage.clickCheckout();

    //     // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
         checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
         checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

    //     // Place the order
         checkoutPage.placeOrder();
         // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
       //Thread.sleep(3000);
         WebDriverWait wait = new WebDriverWait(driver, 30);
         wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id=\"root\"]/div/div[2]/h2")));

    //     // Check if placing order redirected to the Thansk page
         status = driver.getCurrentUrl().endsWith("/thanks");
        Thread.sleep(5000);

        if (status) {
            // Switch to the 1st QKART ad frame
            try {
                driver.switchTo().frame(driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/div/iframe[1]")));
                logStatus("Step 1", "Switched to the 1st QKART ad frame", "PASS");
        
                // Perform actions needed within the 1st QKART ad frame
                // For example, clicking on the buttons
        
                // Find the first button within the ad frame
                WebElement firstButton = driver.findElement(By.xpath("//*[@id=\"continue-btn\"]"));
        
                // Validate if the first button is clickable
                if (firstButton.isEnabled()) {
                    // Click the first button
                    firstButton.click();
                    logStatus("Step 1", "Clicked on the first button", "PASS");
                } else {
                    logStatus("Step 1", "First button is not clickable", "FAIL");
                    return false;
                }
                Thread.sleep(1000);
                //navigate back to previous page
                driver.navigate().back();

                // Wait for the page to reload
                 wait = new WebDriverWait(driver, 10);
                wait.until(ExpectedConditions.urlToBe("https://crio-qkart-frontend-qa.vercel.app/thanks"));
                logStatus("Step 1", "Returned back to the Thanks page", "PASS");
        
                 // Switch back to the main content
                driver.switchTo().defaultContent();
        
                // Switch back to the 1st QKART ad frame
                driver.switchTo().frame(driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/div/iframe[1]")));
        
                // Find the second button within the ad frame
                WebElement secondButton = driver.findElement(By.xpath("//*[@id=\"continue-btn\"]"));
        
                // Validate if the second button is clickable
                if (secondButton.isEnabled()) {
                    // Click the second button
                    secondButton.click();
                    logStatus("Step 1", "Clicked on the second button", "PASS");
                } else {
                    logStatus("Step 1", "Second button is not clickable", "FAIL");
                    return false;
                }
        
                Thread.sleep(1000);
                //navigate back to previous page
                driver.navigate().back();

                // Wait for the page to reload
                wait.until(ExpectedConditions.urlToBe("https://crio-qkart-frontend-qa.vercel.app/thanks"));
                logStatus("Step 1", "Returned back to the Thanks page again", "PASS");
        
                // Switch back to the main content
                driver.switchTo().defaultContent();
        
                // Now, switch back to the parent frame
                driver.switchTo().parentFrame();
                logStatus("Step 1", "Switched back to the parent frame", "PASS");
            } catch (Exception e) {
                logStatus("Step 1", "Switching to the 1st QKART ad frame or other actions failed", "FAIL");
                return false;
            }
        
        
        
            // Switch to the 2nd QKART ad frame
            try {
                driver.switchTo().frame(driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/div/iframe[2]")));
                logStatus("Step 2", "2ns qkart ad", "PASS");
                 // Find the first button within the ad frame
                 WebElement firstButton = driver.findElement(By.xpath("//*[@id=\"continue-btn\"]"));
        
                 // Validate if the first button is clickable
                 if (firstButton.isEnabled()) {
                     // Click the first button
                     firstButton.click();
                     logStatus("Step 2", "Clicked on the first button", "PASS");
                 } else {
                     logStatus("Step 2", "First button is not clickable", "FAIL");
                     return false;
                 }
                 Thread.sleep(1000);
                 //navigate back to previous page
                 driver.navigate().back();
 
                 // Wait for the page to reload
                  wait = new WebDriverWait(driver, 10);
                 wait.until(ExpectedConditions.urlToBe("https://crio-qkart-frontend-qa.vercel.app/thanks"));
                 logStatus("Step 2", "Returned back to the Thanks page", "PASS");
         
                  // Switch back to the main content
                 driver.switchTo().defaultContent();
         
                 // Switch back to the 1st QKART ad frame
                 driver.switchTo().frame(driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/div/iframe[1]")));
         
                 // Find the second button within the ad frame
                 WebElement secondButton = driver.findElement(By.xpath("//*[@id=\"continue-btn\"]"));
         
                 // Validate if the second button is clickable
                 if (secondButton.isEnabled()) {
                     // Click the second button
                     secondButton.click();
                     logStatus("Step 2", "Clicked on the second button", "PASS");
                 } else {
                     logStatus("Step 2", "Second button is not clickable", "FAIL");
                     return false;
                 }
         
                 Thread.sleep(1000);
                 //navigate back to previous page
                 driver.navigate().back();
 
                 // Wait for the page to reload
                 wait.until(ExpectedConditions.urlToBe("https://crio-qkart-frontend-qa.vercel.app/thanks"));
                 logStatus("Step 2", "Returned back to the Thanks page again", "PASS");
         
                 // Switch back to the main content
                 driver.switchTo().defaultContent();
         
                 // Now, switch back to the parent frame
                 driver.switchTo().parentFrame();
                 logStatus("Step 2", "Switched back to the parent frame", "PASS");
                } catch (Exception e) {
                    logStatus("Step 2", "Switching to the 1st QKART ad frame or other actions failed", "FAIL");
                    return false;
                }
        
            // Perform any actions needed within the 2nd QKART ad frame (if necessary)
        
            // Switch back to the main content
            driver.switchTo().defaultContent();
        
            // Switch to the Corona stats ad frame
            try {
                driver.switchTo().frame(driver.findElement(By.xpath("//*[@id=\"root\"]/div/div[2]/iframe")));
                logStatus("Step 3", "Corona ad", "PASS");
            } catch (Exception e) {
                logStatus("Step 3", "Corona ad", "FAIL");
                return false;
            }
        
            // Perform any actions needed within the Corona stats ad frame (if necessary)
        
            // Switch back to the main content
            driver.switchTo().defaultContent();
        
            // Check if there are a total of 3 advertisements (using the correct XPaths)
            int totalAdsQkart = driver.findElements(By.xpath("//*[@id=\"root\"]/div/div[2]/div/iframe[1]")).size() +
                               driver.findElements(By.xpath("//*[@id=\"root\"]/div/div[2]/div/iframe[2]")).size();
            int totalAdsCoronaStats = driver.findElements(By.xpath("//*[@id=\"root\"]/div/div[2]/iframe")).size();
            if (totalAdsQkart == 2 && totalAdsCoronaStats == 1) {
                logStatus("Step 4", "Three ads are present", "PASS");
            } else {
                logStatus("Step 4", "Three ads are present", "FAIL");
                return false;
            }
        }
                

         
  
 
             return status;
         }
    
        
    

    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        RemoteWebDriver driver = createDriver();
        // Maximize and Implicit Wait for things to initailize
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
            // Execute Test Case 1
              totalTests += 1;
              status = TestCase01(driver);
               if (status) {
                   passedTests += 1;
              }

               System.out.println("");

            // //Execute Test Case 2
               totalTests += 1;
                status = TestCase02(driver);
                if (status) {
                   passedTests += 1;
               }

                System.out.println("");
            // //Execute Test Case 3
             totalTests += 1;
                status = TestCase03(driver);
               if (status) {
                passedTests += 1;
                 }

               System.out.println("");

            // // Execute Test Case 4
             totalTests += 1;
                status = TestCase04(driver);
                 if (status) {
                 passedTests += 1;
                 }

             System.out.println("");

            // // Execute Test Case 5
                totalTests += 1;
                 status = TestCase05(driver);
                 if (status) {
                 passedTests += 1;
                 }

               System.out.println("");

            // // // Execute Test Case 6
               totalTests += 1;
                 status = TestCase06(driver);
                if (status) {
                passedTests += 1;
                 }

                 System.out.println("");

            // // Execute Test Case 7
                 totalTests += 1;
                 status = TestCase07(driver);
                 if (status) {
                passedTests += 1;
                }

                 System.out.println("");


            // // Execute Test Case 8
                 totalTests += 1;
                 status = TestCase8(driver);
                 if (status) {
                passedTests += 1;
                }

               System.out.println("");

            // // // Execute Test Case 9
                totalTests += 1;
                status = TestCase9(driver);
                if (status) {
                  passedTests += 1;
                }

                
                 System.out.println("");

            // // Execute Test Case 10
                totalTests += 1;
                  status = TestCase10(driver);
                 if (status) {
                 passedTests += 1;
               }

               System.out.println("");

            // Execute Test Case 11
              totalTests += 1;
               status = TestCase11(driver);
               if (status) {
               passedTests += 1;
             }

            //   System.out.println("");
        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ", Integer.toString(passedTests),
                    Integer.toString(totalTests)));
        }

    }
}